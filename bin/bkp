#!/bin/bash

# Copyright Â© 2010-2016 by madneon
# http://madneon.com

# Parameters
d_root="/opt"           	# root directory
d_log="$d_root/var/log" 	# log directory
f_log="$d_log/bkp.log"  	# log file
f_in="$d_root/etc/bkp"  	# config file
d_out="$d_root/var/bkp" 	# output directory
age_max=17              	# max file age, in days
method="tar.gz"         	# compress method
files="*"               	# files mask to backup
files_addon=""          	#
d_lock="$d_root/var/run"	# lock dir
f_lock="$d_lock/bkp.pid"	# lock file

# Check if locked
if [ -e $f_lock ]; then
	echo -n "Alredy running, PID "
	cat $f_lock
	exit 1
fi

# Lock
if [ ! -d "$d_lock" ]; then
	mkdir -p "$d_lock"
	chmod 700 "$d_lock"
fi
pid=$$
echo $pid > $f_lock

# Load config
if [ "$1"X != X ]; then
	f_in=$1
fi

# Log
if [ ! -d "$d_log" ]; then
	mkdir -p "$d_log"
	chmod 700 "$d_log"
fi

echo -en "\nStart ($$): " >> $f_log
date +"%F %T" >> $f_log

# Main process
function f() {
	while read u; do
		# skip empty lines
		if [ "$u" == "" ]; then
			continue
		fi

		# skip comments
		if [ `echo $u|cut -b1`X == "#X" ]; then
			continue
		fi

		# command "stop"
		a=`echo $u|cut -f1 -d":"`
		s=`echo $u|cut -f2- -d":"`
		if [ "$a"X == "stop"X ]; then
			echo "Service stop: $s" >> $f_log
			/etc/init.d/"$s" stop
			continue
		fi

		# command "start"
		if [ "$a"X == "start"X ]; then
			echo "Service start: $s" >> $f_log
			/etc/init.d/"$s" start
			continue
		fi

		# command "method"
		if [ "$a"X == "method"X ]; then
			method="$s"
			continue
		fi

		# command "dir"
		if [ "$a"X == "dir"X ]; then
			d_out="$s"
			continue
		fi

		# command "files"
		if [ "$a"X == "files"X ]; then
			files="$s"
			if [ "$files"X == "*"X ]; then
				files_addon=""
			else
				files_addon="$files"
			fi
			continue
		fi

		# command "exec"
		if [ "$a"X == "exec"X ]; then
			eval $s
			continue
		fi

		# create output directory
		mkdir -p $d_out
		chmod 700 $d_out
		cd $d_out

		if [ `pwd`X != "$d_out"X ]; then
			echo "Error: cannot access output directory" >> $f_log
			exit 1
		fi

		# delete old archives
		dt=`date +%s`
		for f in `ls -1`; do
			if [ ! -f $f ];then
				continue
			fi
			fd=`echo $f|cut -f2 -d"_"`
			ft=`echo $f|cut -f3 -d"_"|cut -b-8`
			fdt=`date +%s --date "$fd $ft"`
			a=$((dt-fdt))
			a=$((a/86400))
			if [ $a -gt $age_max ]; then
				rm -v $f &>> $f_log
			fi
		done

		# archive name
		n=`echo $u|cut -f1 -d" "`
		# directory to archive
		p=`echo $u|cut -f2 -d" "`

		# get datetime
		dt=`date +"%F_%T"`
		# archive file name
		fn="$n"_"$dt"."$method"

		# compress
		case "$method" in
			"zip")
				zip -qr9 ".$fn.bkpnew" "$p/"$files_addon &>> $f_log
				;;
			"tar.bz2")
				tar -Pcjf "./.$fn.bkpnew" "$p/"$files_addon &>> $f_log
				;;
			"tar.lzma")
				tar --lzma -cf "./.$fn.bkpnew" "$p/"$files_addon &>> $f_log
				;;
			*)
				tar -Pczf "./.$fn.bkpnew" "$p/"$files_addon &>> $f_log
				;;
		esac
		mv "./.$fn.bkpnew" "./$fn"

		# log archive size and name
		if [ $? == 0 ]; then
			s=`stat -c %s $fn`
			echo -e "$s\t$fn" >> $f_log
		fi
	done
}

# Process input file
cat $f_in|f

# Log finish time
echo -en "Finish ($$): " >> $f_log
date +"%F %T" >> $f_log

# Unlock
rm $f_lock

# madneon 2010-06-26, 2010-10-27, 2011-05-14, 2012-08-03, 2014-09-13, 2014-12-14, 2016-09-03, 2016-11-16, 2018-01-14, 2019-03-01
