#!/bin/bash

# Copyright Â© 2010-2016 by madneon
# http://madneon.com

# Parameters
d_root="/opt"					# root directory
d_in="$d_root/var/bkp"			# input directory
d_out="$d_root/var/bkp-mirror"	# output directories (d_out*)
f_in="$d_root/etc/bkp-mirror"	# config file
d_log="$d_root/var/log"			# log directory
f_log="$d_log/bkp-mirror.log"	# log file
d_lock="$d_root/var/run"		# lock dir
f_lock="$d_lock/bkp-mirror.pid"	# lock file
f_hold="$d_lock/bkp.pid"		# hold file (bkp)
space_min=2048					# minimum free space (MiB, must be greater than max transfer/sec)

# Check if locked
if [ -e $f_lock ]; then
	echo -n "Alredy running, pid "
	cat $f_lock
	exit 1
fi

# Lock
if [ ! -d "$d_lock" ]; then
	mkdir -p "$d_lock"
	chmod 700 "$d_lock"
fi
echo $$ > $f_lock

# Specified config
if [ "$1"X != X ]; then
	f_in=$1
fi

# Log
if [ ! -d "$d_log" ]; then
	mkdir -p "$d_log"f
	chmod 700 "$d_log"
fi
echo -en "\nStart\t" >> $f_log
date +"%F %T" >> $f_log

# Pull remote servers
declare -a umounts
export umounts

function pull() {
	regex="(.+)@(.+)\:(.+)"
	if [[ "$1" =~ $regex ]]; then
		user="${BASH_REMATCH[1]}"
		host="${BASH_REMATCH[2]}"
		port="${BASH_REMATCH[3]}"

		if [ -n "$2" ]; then
			target="$2"
		else
			target="$host"
		fi

		if [ ! -d "$d_in/$target" ]; then
			mkdir "$d_in/$target"
		fi
		if [ -n "$3" ]; then
			key="$3"
		else
			key="/home/bkp/.ssh/id_rsa"
		fi

		umounts+=("$d_in/$target")
		echo "Mounting remote: $user@$host:$port$d_in" >> $f_log
		sudo sshfs -o ro,IdentityFile="$key" -p "$port" "$user"@"$host":"$d_in" "$d_in/$target"
	fi
}
export -f pull

# Load config
if [ -f $f_in ]; then
	. $f_in
fi

# Check input dir
if [ ! -d $d_in  ]; then
	echo "Error: cannot access input directory, terminating" >> $f_log
	# Unlock
	rm $f_lock
	exit 1
fi

# Check for "bkp" still running
if [ -f $f_hold ]; then
	echo -n "Waiting for bkp to finish, PID " >> $f_log
	cat $f_hold >> $f_log
	echo "..." >> $f_log
fi

while [ -f $f_hold ]; do
	sleep 1
done

# Background job - check free space, delete oldest archives if needed
space_min=$((space_min*1024))

function df_check() {
	while [ -f $f_lock ]; do
		for d in $d_out*; do
			if [ -d "$d" ]; then
				r=1
				while [ $r == 1 ]; do
					df=`echo \`df $d\`|cut -f11 -d" "`
					if [ $df -lt $space_min ]; then
						r=1
					else
						r=0
					fi

					if [ $r == 1 ]; then
						cd $d
						#todo: implement other "bkp" "methods"
						oldest=`find *|grep -v casual|grep "_....-..-.._..:..:..\.tar\.gz$"|rev|cut -b-26|rev|sort|head -1`
						fs=`find *|grep "$oldest$"`
						for f in $fs; do
							echo -n "($d_out) " >> $f_log
							rm -v $f >> $f_log
						done
					fi
				done
			fi
		done
		sleep 1
	done
}

# Start background job
df_check &

# Sync mounted dirs
time_start=`date +%s.%N`
for d in $d_out*; do
	if [ -d "$d" ]; then
		echo "$d_in -> $d" >> $f_log
		rsync --exclude=".*.bkpnew" -av "$d_in/" "$d/" &>> $f_log
	fi
done
time_finish=`date +%s.%N`
time_diff=`echo "$time_finish-$time_start"|bc`

# Unmount
for u in ${umounts[@]}; do
	echo -e "Unmounting remote: $u" >> $f_log
	sudo umount "$u"
done

# Log finish time
echo -en "Finish\t" >> $f_log
echo -n `date +"%F %T"` >> $f_log
echo -e "\t$time_diff" >> $f_log

sleep 2 # Last df_check

# Unlock
rm $f_lock

# madneon 2010-06-07, 2011-05-14, 2012-08-18, 2014-12-14, 2016-09-03, 2016-11-16, 2019-12-23
